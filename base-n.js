class BaseN{static encrypt(t,n,e,g){const i=e.split(""),l=g.split(""),r=BigInt(i.length),B=BigInt(l.length);let I,f=0n,h="",o=[],s=0n;for(let n=0;n<t.length;n++)f+=r**BigInt(t.length-1-n)*BigInt(i.indexOf(t[n])),s+=r**BigInt(t.length-1-n)*BigInt(i.indexOf(t[n]));let c=0n;for(let t=BigInt(n.length-1);t>=0;t--){const e=i.indexOf(n[Number(t)]);f+=r**t*BigInt(e),c+=r**t*BigInt(e),o.push(e)}for(I=0n;B**I<=f&&B**(I+1n)<f;I++);for(;I>=0;I--)for(let t=0n;t<B;t++){const n=B**I,e=n*t;if(e<=f&&e+n>f){f-=e,h+=l[(Number(t)+o.reduce((t,n)=>t+n))%Number(B)];for(let t=0;t<o.length&&(o[t]+=1,o[t]>=r);t++)o[t]=0}}return h}static decrypt(t,n,e,g){const i=e.split(""),l=g.split(""),r=BigInt(i.length),B=BigInt(l.length);let I,f=0n,h="",o=[];for(let t=BigInt(n.length-1);t>=0;t--){const e=l.indexOf(n[Number(t)]);f-=B**t*BigInt(e),o.push(e)}let s=[];for(let n=0;n<t.length;n++){let e=BigInt(o.reduce((t,n)=>t+n)+i.indexOf(t[n]));for(let n=2;n<r;n++)e-=BigInt(i.indexOf(t[n]))*r-BigInt(o.reduce((t,n)=>t+n));s.push(e%r);for(let t=0;t<o.length&&(o[t]+=1,o[t]>=B);t++)o[t]=0}for(let t=0;t<s.length;t++)f+=r**BigInt(s.length-1-t)*BigInt(s[t]);for(I=0n;B**I<=f&&B**(I+1n)<=f;I++);for(;I>=0;I--)for(let t=0n;t<B;t++){const n=B**I,e=n*t;e<=f&&e+n>f&&(f-=e,h+=l[Number(t)])}return h}static shuffle(t){let n=[],e="";for(;n.length!==t.length;){const g=Math.floor(Math.random()*t.length);n.includes(g)||(e+=t[g],n.push(g))}return e}static extractCharset(t){let n="";for(let e=0;e<t.length;e++)n.includes(t[e])||(n+=t[e]);return n}}