class BaseN{static encrypt(t,n,e,g){const i=e.split(""),l=g.split(""),r=BigInt(i.length),B=BigInt(l.length);let I,s=BigInt(0),o="";for(let n=0;n<t.length;n++)s+=r**BigInt(t.length-1-n)*BigInt(i.indexOf(t[n]));for(let t=BigInt(n.length-1);t>=0;t--)s+=r**t*BigInt(i.indexOf(n[Number(t)]))**BigInt(3);for(I=BigInt(0);B**I<=s&&B**(I+BigInt(1))<s;I++);for(;I>=0;I--)for(let t=BigInt(0);t<B;t++){const n=B**I,e=n*t;e<=s&&e+n>s&&(s-=e,o+=l[Number(t)])}return o}static decrypt(t,n,e,g){const i=e.split(""),l=g.split(""),r=BigInt(i.length),B=BigInt(l.length);let I,s=BigInt(0),o="";for(let n=0;n<t.length;n++)s+=r**BigInt(t.length-1-n)*BigInt(i.indexOf(t[n]));for(let t=BigInt(n.length-1);t>=0;t--)s-=B**t*BigInt(l.indexOf(n[Number(t)]))**BigInt(3);for(I=BigInt(0);B**I<=s&&B**(I+BigInt(1))<s;I++);for(;I>=0;I--)for(let t=BigInt(0);t<B;t++){const n=B**I,e=n*t;e<=s&&e+n>s&&(s-=e,o+=l[Number(t)])}return o}static shuffle(t){let n=[],e="";for(;n.length!==t.length;){const g=Math.floor(Math.random()*t.length);n.includes(g)||(e+=t[g],n.push(g))}return e}static extractCharset(t){let n="";for(let e=0;e<t.length;e++)n.includes(t[e])||(n+=t[e]);return n}}